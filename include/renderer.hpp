#ifndef RENDERER_HPP
#define RENDERER_HPP

#include <SDL2/SDL.h>
#include <SDL_ttf.h>
#include <ngl/NGLInit.h>
#include <ngl/ShaderLib.h>
#include <ngl/Transformation.h>
#include <ngl/VAOPrimitives.h>

struct projectionData
{
    ngl::Mat4 m_project;
    ngl::Transformation m_trans;
    ngl::Mat4 m_view;
};

class renderer
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// \brief ctor for the ngl renderer
    //----------------------------------------------------------------------------------------------------------------------
    renderer();

    ~renderer();

    void clear() const {glClear( GL_COLOR_BUFFER_BIT );}

    void createShaderProgram(const std::string _name, const std::string _vert, const std::string _frag);

    void drawSphere(const ngl::Vec3 _pos, const float _radius, const ngl::Vec4 _colour);

    void finalise();

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Loads the MVP to the active shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Makes the member gl context and window active
    //----------------------------------------------------------------------------------------------------------------------
    void makeCurrent() const { SDL_GL_MakeCurrent(m_window, m_gl_context); }

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Initialises SDL for use in creating the window
    //----------------------------------------------------------------------------------------------------------------------
    void SDLInit();

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// \brief GL context
    //----------------------------------------------------------------------------------------------------------------------
    SDL_GLContext m_gl_context;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Window height
    //----------------------------------------------------------------------------------------------------------------------
    int m_h;

    projectionData m_pSettings;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief The window the game will be drawn in
    //----------------------------------------------------------------------------------------------------------------------
    SDL_Window * m_window = NULL;

    //----------------------------------------------------------------------------------------------------------------------
    /// \brief Window width
    //----------------------------------------------------------------------------------------------------------------------
    int m_w;
};

#endif
